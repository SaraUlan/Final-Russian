from bote import bot
from telebot import types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import schedule
import time
import psycopg2
from database.db import Database
from database.config import host, user, password, db_name
from bot.func import *
from bot.nextStep.quota import add_new_quote, write_quote

db = Database(host, user, password, db_name)




@bot.message_handler(commands=['start'])
def start_messafe(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —É–≥–æ–ª–∫–µ –º—É–¥—Ä–æ—Å—Ç–∏!\n\n üåü –ó–¥–µ—Å—å –≤–∞—à –¥—É—Ö –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ù–∞—à Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –ø–æ–¥–∞—Ä–∏—Ç—å –≤–∞–º –ø–æ—Ä—Ü–∏—é —É–º–Ω—ã—Ö —Ü–∏—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.\n\n –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –æ–ø—ã—Ç –µ—â–µ –±–ª–∏–∂–µ –∫ –≤–∞–º, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º, –∏ –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–∑—É –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–≤–µ—Ç–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏. üöÄ‚ú® \n\n  –ú–æ—Çb–≤–∞—Ü–∏–∏ /motivation \n\n –û –Ω–∞—Å: /info')


@bot.message_handler(commands=['info'])
def info_func(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –º–∏—Ä–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å –ª—é–±–æ–≤—å—é –∏ —Å—Ç—Ä–∞—Å—Ç—å—é –∫ –º—É–¥—Ä–æ—Å—Ç–∏! üåü\n\n–û –ù–∞—Å:\n\n–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—Ä–∞–ª–∏—Å—å –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª–æ–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è:\n\nüöÄ –ê“õ–Ω–∏–µ—Ç –ú”ô—É–ª–µ–Ω(SE-2204) “∞–ª–∞–Ω –°–∞—Ä–∞(SE-2203):\n\n –ú—ã —Ç–µ, –∫—Ç–æ –≤–æ–ø–ª–æ—â–∞–µ—Ç –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, —Å–æ–∑–¥–∞–≤–∞—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –º—É–¥—Ä–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å.\n\nüåà –ù–∞—à–∞ —Ü–µ–ª—å - –¥–µ–ª–∏—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∏ –º—É–¥—Ä–æ—Å—Ç—å—é. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –∫–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ –∑–∞–∂–∏–≥–∞–µ—Ç –∏—Å–∫—Ä—É –≤ –≤–∞—à–∏—Ö —Å–µ—Ä–¥—Ü–∞—Ö.  \n\n  –ú–æ—Çb–≤–∞—Ü–∏–∏ /motivation" )



@bot.message_handler(commands=['motivation'])
def buttons(message):
    markup = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton('–¶–∏—Ç–∞—Ç—ã', callback_data='quotes')
    btn2 = types.InlineKeyboardButton('–ê–≤—Ç–æ—Ä—ã', callback_data='authors')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ü–∏—Ç–∞—Ç—ã', callback_data='add_quotes')
    btn4 = types.InlineKeyboardButton('–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã', callback_data='own_quotes')
    btn5 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É', callback_data='add_new_quotes')
    markup.row(btn5 ,btn3)
    markup.row(btn4)
    bot.reply_to(message, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã–±–æ—Ä ‚Äì —ç—Ç–æ –∫–ª—é—á –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –æ–ø—ã—Ç—É. ü§î‚ú®\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π:', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_motivation_callback(call):
    if call.data == 'quotes':
        quota = send_quotes(db)
        bot.send_message(call.message.chat.id, quota)
    elif call.data == 'authors':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–†–æ–±–∏–Ω –®–∞—Ä–º–∞', callback_data='Sarma')
        btn2 = types.InlineKeyboardButton('–ê–≤—Ä–∞–∞–º –õ–∏–Ω–∫–æ–ª—å–Ω', callback_data='Linkoln')
        btn3 = types.InlineKeyboardButton('–§—ë–¥–æ—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á –î–æ—Å—Ç–æ–µÃÅ–≤—Å–∫–∏–π', callback_data='dostoyevski')
        btn4 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
        markup.row(btn1, btn2)
        markup.row(btn3)
        markup.row(btn4)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
        
    elif call.data == 'add_quotes':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–∏—Ç–∞—Ç—É')
        bot.register_next_step_handler(call.message, write_quote, db)
    elif call.data == 'own_quotes':
        user_username = call.message.chat.username
        quota = my_quote(db, f'@{user_username}')
        bot.send_message(call.message.chat.id, quota)
    elif call.data == 'back':
        markup = types.InlineKeyboardMarkup()

        btn1 = types.InlineKeyboardButton('–¶–∏—Ç–∞—Ç—ã', callback_data='quotes')
        btn2 = types.InlineKeyboardButton('–ê–≤—Ç–æ—Ä—ã', callback_data='authors')
        markup.row(btn1, btn2)
        btn3 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ü–∏—Ç–∞—Ç—ã', callback_data='add_quotes')
        btn4 = types.InlineKeyboardButton('–ú–æ–∏ —Ü–∏—Ç–∞—Ç—ã', callback_data='own_quotes')
        markup.row(btn3)
        markup.row(btn4)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    elif call.data == 'Sarma':
        quota = send_sarma(db)
        bot.send_message(call.message.chat.id, quota)
    elif call.data == 'Linkoln':
        quota = send_linkoln(db)
        bot.send_message(call.message.chat.id, quota)
    elif call.data == 'dostoyevski':
        quota = send_dostoyevski(db)
        bot.send_message(call.message.chat.id, quota)
    elif call.data == 'add_new_quotes':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É')
        bot.register_next_step_handler(call.message, add_new_quote, db)
        
if __name__=='__main__':

    bot.infinity_polling()
